#version 330 core

precision highp float;

////////////
// Inputs //
////////////
in vec2 TexCoord;

/////////////
// Outputs //
/////////////
out vec4 colour;

//////////////
// Uniforms //
//////////////
uniform float featureRed;
uniform float featureGreen;
uniform float featureBlue;
uniform float featureAnimate;
uniform float featureRing;
uniform float featureHeart;
uniform float featureMarble;
uniform float featureVStripe;
uniform float featureDiamond;
uniform float featureBrick;
uniform float featureCheckerboard;
uniform float featureStar;
uniform float featureXor;
uniform float featureBrightness;

uniform int tileID;
uniform float time;

/////////////
// Defines //
/////////////
#define SCALE 12

/////////////////////////////////////////////////////////////////////////
//                                                                     //
// Description : Array and textureless GLSL 2D simplex noise function. //
//      Author : Ian McEwan, Ashima Arts.                              //
//  Maintainer : stegu                                                 //
//     Lastmod : 20110822 (ijm)                                        //
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.  //
//               Distributed under the MIT License. See LICENSE file.  //
//               https://github.com/ashima/webgl-noise                 //
//               https://github.com/stegu/webgl-noise                  //
//                                                                     //
/////////////////////////////////////////////////////////////////////////

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  	+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

///////////////////////////////////////////////////////////////////////

/////////////////////////
// Assistant Functions //
/////////////////////////

// Used to map a value of one input range to its equivalent in another output range.
float mapToRange(float inputValue, float inputStart, float inputEnd, float outputStart, float outputEnd)
{
  return outputStart + ((outputEnd - outputStart) / (inputEnd - inputStart)) * (inputValue - inputStart);
}

// Used to convert 0-255 rgb to 0.0-1.0 rgb.
float rgbToGLSL(float colour)
{
  return colour / 255.0;
}

// Simplex noise with inputs of Texture Coordinates with detail specified by size.
float snoiseTurbulence(float x, float y, float initialSize)
{
	float t = 0.0;
	float size = initialSize;

	while (size >= 1)
	{
		t += snoise(vec2(TexCoord.x*255 / size, TexCoord.y*255 / size)) * size;
		size /= 2;
	}

	t = (t) / initialSize;
	return t;
}

/////////////////////////////

//////////////
// Patterns //
//////////////

vec3 brick(float x, float y)
{
	const float BRICKWIDTH = 0.25;
	const float BRICKHEIGHT = 0.08;
	const float MORTARTHICKNESS = 0.01;

	const float BMWIDTH = (BRICKWIDTH + MORTARTHICKNESS);
	const float BMHEIGHT = (BRICKHEIGHT + MORTARTHICKNESS);
	const float MWF = (MORTARTHICKNESS * 0.5 / BMWIDTH);
	const float MHF = (MORTARTHICKNESS * 0.5 / BMHEIGHT);


	const float ka = 1;
	const float kd = 1;
	const vec3 Cbrick = vec3(0.59, 0.09, 0.04);
	const vec3 Cmortar = vec3(0.5, 0.5, 0.5);
	
	vec3 Ct;
	//vec2 Nf;
	float ss, tt, sbrick, tbrick, w, h;
	float scoord = TexCoord.x;
	float tcoord = TexCoord.y;
	
	//Nf = normalize(faceforward(N, I, 1);
	
	ss = scoord / BMWIDTH;
	tt = tcoord / BMHEIGHT;
	
	if(mod(tt * 0.5, 1.0) > 0.5)
	{
		ss += 0.5;
	}
	
	sbrick = floor(ss);
	tbrick = floor(tt);
	ss -= sbrick;
	tt -= tbrick;
	
	w = step(MWF, ss) - step(1.0-MWF, ss);
	h = step(MHF, tt) - step(1.0-MHF, tt);
	
	Ct = mix(Cmortar, Cbrick, w*h);
	
	return Ct;
}

vec3 verticalStripes(float x, float y, float noise)
{
	float ret = (1 + sin( (x + noise ) * 10) ) / 2;
	
	return vec3(ret, ret, ret);
}

//Function to form log cross-section using Texture Coordinates with variable turbulence.
vec3 woodRings(float x, float y, float noise, int numCircles, float turbPower)
{
  vec3 retColour;

  //Maps x and z to include the negative range so creates whole circles rather than quarters
  float xx = x - 0.5;
  float yy = y - 0.5;

  //Form wood rings by combining rings + turbulence(noise) then putting through sin function.
  float rings = numCircles * sqrt(xx*xx*40 + yy*yy*40);
  float turbulence = turbPower * noise;
  float turbulenceRings = rings+turbulence;
  float formedRings = abs(sin(turbulenceRings));
  formedRings = mapToRange(formedRings, 0.0, 1.0, 0.0, 0.3);

  //Colour set using formed rings value but added to rgb constants for wood colour.
  retColour = vec3(rgbToGLSL(80.0) + formedRings, rgbToGLSL(30.0) + formedRings, rgbToGLSL(0.0));
  return retColour;
}

vec3 checkerBoard(float x, float y, float noise, int numTiles)
{
	vec3 colour;
	float a = floor(x * numTiles);
	float b = floor(y * numTiles);
	if (mod(a+b, 2.0) + noise/2 < 0.5) {  // a+b is odd
		colour = vec3(1.0, 1.0, 1.0); // White
	}
	else if(mod(a+b, 2.0) < 0.5){
		colour = vec3(0.05, 0.4, 0.0);
	}
	else {  // a+b is even
		colour = vec3(0.0, 0.0, 0.0); // Dark Green
	}
	return colour;
}

vec3 heart(float x, float y)
{
	//Position x + y in range.
	float xx = x - 0.25;
	float yy = y - 0.5;	
	
	//If remove 5 this becomes more darker with smaller hearts of colour.
	float ret = 5 + (-sqrt(1-pow(yy,2)-pow((xx-abs(yy)),2))*cos(30*((1-pow(yy,2)-pow((xx-abs(yy)),2)))));
	
	return vec3(ret, ret, ret);
}

vec3 diamonds(float x, float y)
{
	float xx = x - 0.5;
	float yy = y - 0.5;

	float ret;
	if(sin(x*SCALE + y*SCALE) < sin(x*SCALE - y*SCALE))
	ret = sin(x*SCALE + y*SCALE);
	else
	ret = sin(x*SCALE - y*SCALE);
	
	return vec3(ret, ret, ret);
}

const vec3 tileSize = vec3(1.0, 1.0, 1.0);
const vec3 tilePct = vec3(0.98, 1.0, 0.98);
vec3 marble(float x, float y, float amplitude, float roughness)
{
	float t = 6.28 * x / 1.0 ;
	t += amplitude * snoiseTurbulence (x,y, roughness);
	// replicate over rows of tiles (wont be identical, because noise is depending on all coordinates of the input vector):
	t = sin(t);
	
	return vec3(t, t, t);
}

float tileRandom = snoise (vec2(tileID));

vec3 star(float x, float y)
{
	const float PI = 3.1415926535897932384626433832795;

	const float star_ka = 1.0;
	const float star_kd = 1.0;
	const vec3 star_colour = vec3(1.0, 0.5161, 0.0);
	const float star_npoints = 6;
	const float star_sctr = 0.5;
	const float star_tctr = 0.5;
	
	vec3 Ct;
	float ss, tt, angle, r, a, in_out;
	float s = x;
	float t = y;
	float rmin = 0.1;
	float rmax = 0.2;
	float starangle = 2.0 * PI / star_npoints;
	vec3 p0 = rmax * vec3(cos(0.0), sin(0.0), 0);
	vec3 pi = rmin * vec3(cos(starangle/2.0), sin(starangle/2.0), 0);
	vec3 d0 = pi - p0;
	vec3 d1;
	ss = s - star_sctr;
	tt = t - star_tctr;
	angle = atan(ss, tt) + PI;
	r = sqrt(ss*ss + tt*tt);
	
	a = mod(angle, starangle) / starangle;
	if(a >= 0.5)
	{
		a = 1.0 - a;
	}
	
	d1 = r * (vec3(cos(a), sin(a), 0)) - p0;
	in_out = step(0.0, dot(d0,d1));
	vec3 Cs = vec3(0.5, 0.5, 0.5);
	Ct = mix(Cs, star_colour, in_out);
	return Ct;
}

vec3 xor(float x, float y)
{
	float ret = (int(x*255) ^ int(y*255)) / 255.0;
	return vec3(ret, ret, ret);;
}

void main ()
{
	//Setup Noise.
	float stripeNoise = snoise(vec2(TexCoord.x, TexCoord.y))*tileRandom +(featureAnimate*time);
	float woodNoise = snoiseTurbulence(TexCoord.x, TexCoord.y, 24.0)*tileRandom+(featureAnimate*time*time);
	float checkerNoise = snoiseTurbulence(TexCoord.x*5, TexCoord.y*5, 64.0)*(featureAnimate*time*time);
	
	//Generate patterns.
	vec3 patternBrick 		 = brick(TexCoord.x, TexCoord.y);
	vec3 patternCheckerboard = checkerBoard(TexCoord.x, TexCoord.y, checkerNoise, SCALE);
	vec3 patternVStripe 	 = verticalStripes(TexCoord.x, TexCoord.y, stripeNoise);
	vec3 patternHeart 		 = heart(TexCoord.x, TexCoord.y);
	vec3 patternRing 		 = woodRings(TexCoord.x, TexCoord.y, woodNoise, SCALE, 0.1);
	vec3 patternDiamond		 = diamonds(TexCoord.x, TexCoord.y);
	vec3 patternMarble 		 = marble(TexCoord.x, TexCoord.y, 16.0, 100.0);
	vec3 patternStar		 = star(TexCoord.x, TexCoord.y);
	vec3 patternXor			 = xor(TexCoord.x, TexCoord.y);
	
	//Calculate each pattern influence.
	vec3 influenceBrick 		= patternBrick * featureBrick;
	vec3 influenceCheckerboard  = patternCheckerboard * featureCheckerboard;
	vec3 influenceVStripe 		= patternVStripe * featureVStripe;
	vec3 influenceHeart 		= patternHeart * featureHeart;
	vec3 influenceRing 			= patternRing * featureRing;
	vec3 influenceDiamond 		= patternDiamond * featureDiamond;
	vec3 influenceMarble 		= patternMarble * featureMarble;
	vec3 influenceStar			= patternStar * featureStar;
	vec3 influenceXor			= patternXor * featureXor;
	
	//Combine patterns to calculated degree.
	vec4 finalColour;
	finalColour.x = (influenceBrick.x + influenceCheckerboard.x + influenceVStripe.x + influenceHeart.x + influenceRing.x + influenceDiamond.x + influenceMarble.x + influenceStar.x + influenceXor.x)/9.0;
	finalColour.y = (influenceBrick.y + influenceCheckerboard.y + influenceVStripe.y + influenceHeart.y + influenceRing.y + influenceDiamond.y + influenceMarble.y + influenceStar.y + influenceXor.y)/9.0;
	finalColour.z = (influenceBrick.z + influenceCheckerboard.z + influenceVStripe.z + influenceHeart.z + influenceRing.z + influenceDiamond.z + influenceMarble.z + influenceStar.z + influenceXor.z)/9.0;
	finalColour.a = 1.0;
	
	//Output final pixel.
	colour = vec4(finalColour.x*featureRed*featureBrightness, finalColour.y*featureGreen*featureBrightness, finalColour.z*featureBlue*featureBrightness, finalColour.a);
}